// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(cuid())
  onboarded         Boolean       @default(false)
  skippedOnboarding Boolean       @default(false)
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  habits            Habit[]
  goals             Goal[]
  sportSeasons      SportSeason[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next Auth models

model Habit {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sport {
  id   String @id @default(cuid())
  name String

  goals   Goal[]
  seasons SportSeason[]
}

model SportSeason {
  id        String   @id @default(cuid())
  sportId   String
  userId    String
  startDate DateTime
  endDate   DateTime

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport Sport  @relation(fields: [sportId], references: [id], onDelete: Cascade)
  goals Goal[]
}

enum ReccuringType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  SEASON
}

model Goal {
  id          String    @id @default(cuid())
  sportId     String?
  userId      String
  title       String
  description String    @db.Text
  target      Decimal
  unit        String
  startDate   DateTime  @default(now())
  endDate     DateTime?
  ceatedAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aiAugmented Boolean   @default(false)
  aiCreated   Boolean   @default(false)

  //TODO: Support this
  recurring     Boolean       @default(false)
  recurringType ReccuringType
  sportSeasonId String?

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport       Sport?       @relation(fields: [sportId], references: [id], onDelete: SetNull)
  sportSeason SportSeason? @relation(fields: [sportSeasonId], references: [id], onDelete: SetNull)
}
